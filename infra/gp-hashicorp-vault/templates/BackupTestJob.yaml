{{- if .Values.backup.enabled }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-backup-sa-auth-delegator
  labels:
        {{- include "gp-hashicorp-vault.labels" . | nindent 4 }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'system:auth-delegator'
subjects:
  - kind: ServiceAccount
    name: vault-backup-sa
    namespace: {{ .Release.Namespace }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-backup-tester-configmap
  namespace: {{ .Release.Namespace }}
  labels:
      {{- include "gp-hashicorp-vault.labels" . | nindent 4 }}
data:
  config.hcl: |
    storage "raft" {
      path = "/data"
    }
      listener "tcp" {
      address = "127.0.0.1:8200"
      tls_disable = true
    }
      disable_mlock = true
      cluster_addr = "http://faketestingaddress:8200"
      api_addr = "http://127.0.0.1:8200"
      seal "gcpckms" {
      credentials = "/vault/userconfig/unseal-creds/creds.json"
      project = "gepaplexx"
      region = "europe-west6"
      key_ring = "gepaplexx-keyring"
      crypto_key = "vault-key"
      disabled = "false"
    }
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: vault-backup-tester
  namespace: {{ .Release.Namespace }}
  labels:
      {{- include "gp-hashicorp-vault.labels" . | nindent 4 }}
spec:
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  schedule: '{{ .Values.backup.testingSchedule }}'
  jobTemplate:
    spec:
      backoffLimit: 3
      template:
        spec:
          containers:
            - name: "vault-raft-backup-tester"
              image: 'hashicorp/vault:1.13.1'
              env:
                - name: VAULT_ADDR
                  value: "http://127.0.0.1:8200"
                - name: HOME
                  value: /data
              command: ["/bin/sh", "-ec"]
              args:
                - vault server -config=/vault/config/config.hcl
                  & sleep 10
                  && ROOT_TOKEN_FRAGMENT=$(vault operator init -format=json | grep root_token)
                  && ROOT_TOKEN=$(echo ${ROOT_TOKEN_FRAGMENT:17:-1})
                  && vault login $ROOT_TOKEN
                  && echo "Reading backup $(readlink -f /backup/latest)"
                  && vault operator raft snapshot restore -force /backup/latest
                  && vault status
                  && export VAULT_TOKEN=$(vault write -field=token auth/kubernetes/login role="backup-tester" jwt=$(cat /run/secrets/kubernetes.io/serviceaccount/token))
                  && if [ -z "$(vault auth list | grep oidc)" ]; then echo "oidc auth not found in backup!"; exit 1; fi
                  && if [ -z "$(vault secrets list | grep cluster/config/)" ]; then echo "cluster/config/ secret store not found in backup!"; exit 1; fi
              resources:
                requests:
                  memory: '100Mi'
                  cpu: '100m'
                limits:
                  memory: "600Mi"
              volumeMounts:
                - name: backup-volume
                  mountPath: /backup
                - name: unseal-creds
                  readOnly: true
                  mountPath: /vault/userconfig/unseal-creds
                - name: config
                  mountPath: /vault/config
                - name: temp-data
                  mountPath: /data
          volumes:
            - name: backup-volume
              persistentVolumeClaim:
                claimName: 'gp-vault-backup-pvc'
            - name: unseal-creds
              secret:
                secretName: gcp-creds
                defaultMode: 420
                optional: false
            - name: config
              configMap:
                name: backup-tester-configmap
                defaultMode: 420
            - name: temp-data
              emptyDir:
                sizeLimit: 100Mi
          serviceAccountName: vault-backup-sa
          restartPolicy: Never
{{- end }}