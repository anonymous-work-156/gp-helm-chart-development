realm: internal
clients:
{{- if .Values.argoWorkflows.enabled }}
  - clientId: argo-workflows
    name: Argo Workflows
    rootUrl: {{ tpl .Values.argoWorkflows.rootUrl . }}
    enabled: true
    clientAuthenticatorType: client-secret
    secret: '$(properties:/secrets/secrets.properties::ARGO_WF_CLIENT_SECRET)'
    redirectUris:
      {{- tpl (.Values.argoWorkflows.redirectUris | toYaml) . | nindent 8 }}
    webOrigins:
      {{ tpl (.Values.argoWorkflows.webOrigins | toYaml) . | nindent 8 }}
    implicitFlowEnabled: true
    publicClient: false
    protocol: openid-connect
    attributes:
      saml.force.post.binding: 'false'
      saml.multivalued.roles: 'false'
      frontchannel.logout.session.required: 'false'
      post.logout.redirect.uris: "+"
      oauth2.device.authorization.grant.enabled: 'false'
      saml.server.signature.keyinfo.ext: 'false'
      use.refresh.tokens: 'true'
      oidc.ciba.grant.enabled: 'false'
      client_credentials.use_refresh_token: 'false'
      require.pushed.authorization.requests: 'false'
      saml.client.signature: 'false'
      saml.allow.ecp.flow: 'false'
      id.token.as.detached.signature: 'false'
      saml.assertion.signature: 'false'
      saml.encrypt: 'false'
      saml.server.signature: 'false'
      exclude.session.state.from.auth.response: 'false'
      saml.artifact.binding: 'false'
      saml_force_name_id_format: 'false'
      acr.loa.map: "{}"
      tls.client.certificate.bound.access.tokens: 'false'
      saml.authnstatement: 'false'
      display.on.consent.screen: 'false'
      token.response.type.bearer.lower-case: 'false'
      saml.onetimeuse.condition: 'false'
    protocolMappers:
      - name: Client Host
        protocol: openid-connect
        protocolMapper: oidc-usersessionmodel-note-mapper
        consentRequired: false
        config:
          user.session.note: clientHost
          userinfo.token.claim: 'true'
          id.token.claim: 'true'
          access.token.claim: 'true'
          claim.name: clientHost
          jsonType.label: String
      - name: Client ID
        protocol: openid-connect
        protocolMapper: oidc-usersessionmodel-note-mapper
        consentRequired: false
        config:
          user.session.note: clientId
          userinfo.token.claim: 'true'
          id.token.claim: 'true'
          access.token.claim: 'true'
          claim.name: clientId
          jsonType.label: String
      - name: Client IP Address
        protocol: openid-connect
        protocolMapper: oidc-usersessionmodel-note-mapper
        consentRequired: false
        config:
          user.session.note: clientAddress
          userinfo.token.claim: 'true'
          id.token.claim: 'true'
          access.token.claim: 'true'
          claim.name: clientAddress
          jsonType.label: String
{{- end }}
{{- if .Values.grafana.enabled }}
  - clientId: grafana
    name: Grafana
    description: Grafana OAuth Client
    rootUrl: {{ tpl .Values.grafana.rootUrl . }}
    adminUrl: {{ tpl .Values.grafana.adminUrl . }}
    enabled: true
    clientAuthenticatorType: client-secret
    secret: '$(properties:/secrets/secrets.properties::GRAFANA_CLIENT_SECRET)'
    redirectUris:
      {{- tpl (.Values.grafana.redirectUris | toYaml) . | nindent 8 }}
    webOrigins:
      {{ tpl (.Values.grafana.webOrigins | toYaml) . | nindent 8 }}
    implicitFlowEnabled: true
    serviceAccountsEnabled: true
    publicClient: false
    protocol: openid-connect
    attributes:
      saml.multivalued.roles: 'false'
      saml.force.post.binding: 'false'
      frontchannel.logout.session.required: 'false'
      oauth2.device.authorization.grant.enabled: 'true'
      saml.server.signature.keyinfo.ext: 'false'
      use.refresh.tokens: 'true'
      oidc.ciba.grant.enabled: 'false'
      client_credentials.use_refresh_token: 'false'
      saml.client.signature: 'false'
      require.pushed.authorization.requests: 'false'
      saml.allow.ecp.flow: 'false'
      saml.assertion.signature: 'false'
      id.token.as.detached.signature: 'false'
      saml.encrypt: 'false'
      saml.server.signature: 'false'
      exclude.session.state.from.auth.response: 'false'
      saml.artifact.binding: 'false'
      saml_force_name_id_format: 'false'
      tls.client.certificate.bound.access.tokens: 'false'
      acr.loa.map: "{}"
      saml.authnstatement: 'false'
      display.on.consent.screen: 'false'
      token.response.type.bearer.lower-case: 'false'
      saml.onetimeuse.condition: 'false'
    protocolMappers:
      - name: Client Host
        protocol: openid-connect
        protocolMapper: oidc-usersessionmodel-note-mapper
        consentRequired: false
        config:
          user.session.note: clientHost
          id.token.claim: 'true'
          access.token.claim: 'true'
          claim.name: clientHost
          jsonType.label: String
      - name: Client IP Address
        protocol: openid-connect
        protocolMapper: oidc-usersessionmodel-note-mapper
        consentRequired: false
        config:
          user.session.note: clientAddress
          id.token.claim: 'true'
          access.token.claim: 'true'
          claim.name: clientAddress
          jsonType.label: String
      - name: Client ID
        protocol: openid-connect
        protocolMapper: oidc-usersessionmodel-note-mapper
        consentRequired: false
        config:
          user.session.note: clientId
          id.token.claim: 'true'
          access.token.claim: 'true'
          claim.name: clientId
          jsonType.label: String
{{- end }}
{{- if .Values.sonarqube.enabled }}
  - clientId: sonarqube
    enabled: true
    clientAuthenticatorType: client-secret
    secret: '$(properties:/secrets/secrets.properties::GRAFANA_CLIENT_SECRET)'
    redirectUris:
      {{- tpl (.Values.sonarqube.redirectUris | toYaml) . | nindent 8 }}
    directAccessGrantsEnabled: false
    publicClient: false
    frontchannelLogout: true
    protocol: saml
    attributes:
      saml.force.post.binding: 'true'
      saml.multivalued.roles: 'false'
      frontchannel.logout.session.required: 'false'
      post.logout.redirect.uris: "+"
      oauth2.device.authorization.grant.enabled: 'false'
      saml.server.signature.keyinfo.ext: 'false'
      use.refresh.tokens: 'true'
      oidc.ciba.grant.enabled: 'false'
      backchannel.logout.session.required: 'false'
      client_credentials.use_refresh_token: 'false'
      saml.signature.algorithm: RSA_SHA256
      require.pushed.authorization.requests: 'false'
      saml.client.signature: 'false'
      saml.allow.ecp.flow: 'false'
      saml.server.signature.keyinfo.xmlSigKeyInfoKeyNameTransformer: CERT_SUBJECT
      id.token.as.detached.signature: 'false'
      saml.assertion.signature: 'false'
      saml.encrypt: 'false'
      saml.server.signature: 'true'
      exclude.session.state.from.auth.response: 'false'
      saml.artifact.binding: 'false'
      saml_force_name_id_format: 'false'
      acr.loa.map: "{}"
      tls.client.certificate.bound.access.tokens: 'false'
      saml.authnstatement: 'true'
      display.on.consent.screen: 'false'
      saml_name_id_format: username
      token.response.type.bearer.lower-case: 'false'
      saml.onetimeuse.condition: 'false'
      saml_signature_canonicalization_method: http://www.w3.org/2001/10/xml-exc-c14n#
    protocolMappers:
      - name: Login
        protocol: saml
        protocolMapper: saml-user-property-mapper
        consentRequired: false
        config:
          user.attribute: username
          attribute.name: login
      - name: Username
        protocol: saml
        protocolMapper: saml-user-property-mapper
        consentRequired: false
        config:
          user.attribute: username
          attribute.name: username
      - name: Groups
        protocol: saml
        protocolMapper: saml-user-attribute-mapper
        consentRequired: false
        config:
          user.attribute: groups
          attribute.name: groups
      - name: email
        protocol: saml
        protocolMapper: saml-user-property-mapper
        consentRequired: false
        config:
          user.attribute: email
          attribute.name: email
    defaultClientScopes: []
    optionalClientScopes: []
{{- end }}
{{- if .Values.vault.enabled }}
  - clientId: vault
    name: HashiCorp Vault
    rootUrl: {{ tpl .Values.vault.rootUrl . }}
    adminUrl: {{ tpl .Values.vault.adminUrl . }}
    enabled: true
    clientAuthenticatorType: client-secret
    secret: '$(properties:/secrets/secrets.properties::VAULT_CLIENT_SECRET)'
    redirectUris:
      {{- tpl (.Values.vault.redirectUris | toYaml) . | nindent 8 }}
    webOrigins:
      {{- tpl (.Values.vault.webOrigins | toYaml) . | nindent 8 }}
    implicitFlowEnabled: true
    publicClient: false
    protocol: openid-connect
    attributes:
      saml.multivalued.roles: 'false'
      saml.force.post.binding: 'false'
      frontchannel.logout.session.required: 'false'
      oauth2.device.authorization.grant.enabled: 'false'
      saml.server.signature.keyinfo.ext: 'false'
      use.refresh.tokens: 'true'
      oidc.ciba.grant.enabled: 'false'
      client_credentials.use_refresh_token: 'false'
      saml.client.signature: 'false'
      require.pushed.authorization.requests: 'false'
      saml.allow.ecp.flow: 'false'
      saml.assertion.signature: 'false'
      id.token.as.detached.signature: 'false'
      saml.encrypt: 'false'
      saml.server.signature: 'false'
      exclude.session.state.from.auth.response: 'false'
      saml.artifact.binding: 'false'
      saml_force_name_id_format: 'false'
      tls.client.certificate.bound.access.tokens: 'false'
      acr.loa.map: "{}"
      saml.authnstatement: 'false'
      display.on.consent.screen: 'false'
      token.response.type.bearer.lower-case: 'false'
      saml.onetimeuse.condition: 'false'
{{- end }}
{{- if .Values.testresultpublisher.enabled }}
  - clientId: testresult-publisher
    enabled: true
    clientAuthenticatorType: client-secret
    redirectUris:
      {{- tpl (.Values.testresultpublisher.redirectUris | toYaml) . | nindent 8 }}
    webOrigins:
      {{- tpl (.Values.testresultpublisher.webOrigins | toYaml) . | nindent 8 }}
    implicitFlowEnabled: true
    protocol: openid-connect
    attributes:
      saml.multivalued.roles: 'false'
      saml.force.post.binding: 'false'
      frontchannel.logout.session.required: 'false'
      oauth2.device.authorization.grant.enabled: 'false'
      saml.server.signature.keyinfo.ext: 'false'
      use.refresh.tokens: 'true'
      oidc.ciba.grant.enabled: 'false'
      client_credentials.use_refresh_token: 'false'
      saml.client.signature: 'false'
      require.pushed.authorization.requests: 'false'
      saml.allow.ecp.flow: 'false'
      saml.assertion.signature: 'false'
      id.token.as.detached.signature: 'false'
      saml.encrypt: 'false'
      saml.server.signature: 'false'
      exclude.session.state.from.auth.response: 'false'
      saml.artifact.binding: 'false'
      saml_force_name_id_format: 'false'
      acr.loa.map: "{}"
      tls.client.certificate.bound.access.tokens: 'false'
      saml.authnstatement: 'false'
      display.on.consent.screen: 'false'
      token.response.type.bearer.lower-case: 'false'
      saml.onetimeuse.condition: 'false'
    defaultClientScopes:
      - web-origins
      - acr
      - roles
      - profile
      - email
    optionalClientScopes:
      - address
      - phone
      - offline_access
      - microprofile-jwt
{{- end }}